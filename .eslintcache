[{"/Users/jacoborbach/trekit/src/index.js":"1","/Users/jacoborbach/trekit/src/App.js":"2","/Users/jacoborbach/trekit/src/reportWebVitals.js":"3","/Users/jacoborbach/trekit/src/dux/store.js":"4","/Users/jacoborbach/trekit/src/routes.js":"5","/Users/jacoborbach/trekit/src/dux/reducer.js":"6","/Users/jacoborbach/trekit/src/Components/Header/Header.js":"7","/Users/jacoborbach/trekit/src/Components/Landing/Landing.js":"8","/Users/jacoborbach/trekit/src/Components/MyMap/MyMap.js":"9","/Users/jacoborbach/trekit/src/Components/Settings/Settings.js":"10","/Users/jacoborbach/trekit/src/Components/FriendsProfile/FriendsProfile.js":"11","/Users/jacoborbach/trekit/src/theme.js":"12","/Users/jacoborbach/trekit/src/hooks.js":"13","/Users/jacoborbach/trekit/src/global.js":"14","/Users/jacoborbach/trekit/src/useWindowDimensions.js":"15","/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/dark.js":"16","/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/original.js":"17","/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/silver.js":"18","/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/noLabels.js":"19","/Users/jacoborbach/trekit/src/Components/SearchMap/SearchMap.js":"20","/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/sunset.js":"21","/Users/jacoborbach/trekit/src/Components/InfoWindowComp/InfoWindowComp.js":"22","/Users/jacoborbach/trekit/src/Components/MyMap/Filter/Filter.js":"23","/Users/jacoborbach/trekit/src/Components/index.js":"24","/Users/jacoborbach/trekit/src/Components/Menu/index.js":"25","/Users/jacoborbach/trekit/src/Components/Burger/index.js":"26","/Users/jacoborbach/trekit/src/Components/Menu/Menu.js":"27","/Users/jacoborbach/trekit/src/Components/Burger/Burger.js":"28","/Users/jacoborbach/trekit/src/Components/Menu/Menu.styled.js":"29","/Users/jacoborbach/trekit/src/Components/Burger/Burger.styled.js":"30","/Users/jacoborbach/trekit/src/Components/Listbox/Listbox.js":"31"},{"size":797,"mtime":1660100059027,"results":"32","hashOfConfig":"33"},{"size":244,"mtime":1716983590424,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1660100059027,"results":"35","hashOfConfig":"33"},{"size":192,"mtime":1660100058813,"results":"36","hashOfConfig":"33"},{"size":567,"mtime":1660100059027,"results":"37","hashOfConfig":"33"},{"size":1087,"mtime":1660100058813,"results":"38","hashOfConfig":"33"},{"size":2838,"mtime":1660100058804,"results":"39","hashOfConfig":"33"},{"size":4543,"mtime":1717072506490,"results":"40","hashOfConfig":"33"},{"size":25480,"mtime":1660100058811,"results":"41","hashOfConfig":"33"},{"size":3346,"mtime":1660100058812,"results":"42","hashOfConfig":"33"},{"size":8391,"mtime":1660100058804,"results":"43","hashOfConfig":"33"},{"size":131,"mtime":1660100059027,"results":"44","hashOfConfig":"33"},{"size":492,"mtime":1660100058813,"results":"45","hashOfConfig":"33"},{"size":934,"mtime":1660100058813,"results":"46","hashOfConfig":"33"},{"size":1006,"mtime":1660100059028,"results":"47","hashOfConfig":"33"},{"size":3285,"mtime":1660100058809,"results":"48","hashOfConfig":"33"},{"size":873,"mtime":1660100058809,"results":"49","hashOfConfig":"33"},{"size":4214,"mtime":1660100058810,"results":"50","hashOfConfig":"33"},{"size":632,"mtime":1660100058809,"results":"51","hashOfConfig":"33"},{"size":1509,"mtime":1660100058811,"results":"52","hashOfConfig":"33"},{"size":2718,"mtime":1660100058810,"results":"53","hashOfConfig":"33"},{"size":14296,"mtime":1660100058804,"results":"54","hashOfConfig":"33"},{"size":364,"mtime":1660100058810,"results":"55","hashOfConfig":"33"},{"size":87,"mtime":1660100058812,"results":"56","hashOfConfig":"33"},{"size":34,"mtime":1660100058808,"results":"57","hashOfConfig":"33"},{"size":36,"mtime":1660100058803,"results":"58","hashOfConfig":"33"},{"size":519,"mtime":1660100058808,"results":"59","hashOfConfig":"33"},{"size":528,"mtime":1660100058803,"results":"60","hashOfConfig":"33"},{"size":941,"mtime":1660100058808,"results":"61","hashOfConfig":"33"},{"size":930,"mtime":1660100058803,"results":"62","hashOfConfig":"33"},{"size":1064,"mtime":1660100058808,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"dyj571",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},"/Users/jacoborbach/trekit/src/index.js",[],["133","134"],"/Users/jacoborbach/trekit/src/App.js",[],"/Users/jacoborbach/trekit/src/reportWebVitals.js",[],"/Users/jacoborbach/trekit/src/dux/store.js",[],"/Users/jacoborbach/trekit/src/routes.js",[],"/Users/jacoborbach/trekit/src/dux/reducer.js",[],"/Users/jacoborbach/trekit/src/Components/Header/Header.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport \"./Header.css\";\nimport { setISODay } from \"date-fns\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\n\nfunction Header(props) {\n  const [textVal, settextVal] = useState(\"\");\n  const [searchResults, setsearchResults] = useState([]);\n  const [first, setFirst] = useState(\"\");\n  const [last, setLast] = useState(\"\");\n  // const [id, setID] = useState(0)\n\n  let handleChange = (e) => {\n    settextVal(e.target.value);\n  };\n\n  // useEffect(() => {\n  //   if (props.location.pathname.includes('friend')) {\n  //       settextVal('')\n  //   }\n  //   if (textVal) {\n  //     handleSearch();\n  //   }\n  // }, [textVal, last]);\n\n  // let handleSearch = () => {\n  //   axios\n  //     .get(`/api/friends/${textVal}`)\n  //     .then((res) => setsearchResults(res.data))\n  //     .catch((err) => console.log(err));\n  // };\n\n  // let handleClick = (id) => {\n  //   if (props.user.id === id) {\n  //     settextVal(\"\");\n  //     props.history.push(`/myMap`);\n  //   } else {\n  //     settextVal(\"\");\n  //     props.history.push(`/friend/${id}`);\n  //   }\n  // };\n\n  return (\n    <>\n      {props.location.pathname === \"/\" ? (\n        <header className=\"header-container\">\n          <h1 id=\"logo\">trekit!</h1>\n        </header>\n      ) : (\n        <header className=\"header-container2\">\n          <Link to=\"/myMap\">\n            <h1 id=\"logo\">trekit!</h1>\n          </Link>\n          <h2 id=\"profileName\">{props.user.first_name}'s Map</h2>\n          {/* <div>\n            <Combobox>\n              <ComboboxInput\n                id=\"searchFriends\"\n                value={textVal}\n                onChange={handleChange}\n                placeholder=\"  Search for Friends...\"\n              />\n              <ComboboxPopover>\n                <ComboboxList>\n                  {searchResults.map((person) => (\n                    <ComboboxOption\n                      key={person.id}\n                      value={person.first_name + \" \" + person.last_name}\n                      onClick={() => handleClick(person.id)}\n                    />\n                  ))}\n                </ComboboxList>\n              </ComboboxPopover>\n            </Combobox>\n          </div> */}\n\n          <nav>\n            <Link to=\"settings\" title=\"Settings\">\n              <SettingsIcon id=\"settings\"></SettingsIcon>\n            </Link>\n          </nav>\n        </header>\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = (reduxState) => ({\n  user: reduxState.userReducer.user,\n});\n\nexport default withRouter(connect(mapStateToProps)(Header));\n","/Users/jacoborbach/trekit/src/Components/Landing/Landing.js",[],"/Users/jacoborbach/trekit/src/Components/MyMap/MyMap.js",["151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171"],"import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { v4 as randomString } from \"uuid\";\nimport { GoogleMap, useLoadScript, Marker } from \"@react-google-maps/api\";\nimport SearchMap from \"../SearchMap/SearchMap\";\nimport { original } from \"./ColorThemes/original\";\nimport { dark } from \"./ColorThemes/dark\";\nimport { silver } from \"./ColorThemes/silver\";\nimport { noLabels } from \"./ColorThemes/noLabels\";\nimport { sunset } from \"./ColorThemes/sunset\";\nimport \"./MyMap.css\";\nimport InfoWindowComp from \"../InfoWindowComp/InfoWindowComp\";\nimport { ThemeProvider } from \"styled-components\";\nimport { useOnClickOutside } from \"../../hooks\";\nimport { GlobalStyles } from \"../../global\";\nimport { theme } from \"../../theme\";\nimport { Burger, Menu } from \"../../Components\";\nimport FocusLock from \"react-focus-lock\";\nimport useWindowDimensions from \"../../useWindowDimensions\";\nimport * as d3Collection from \"d3-collection\";\nimport capitalize from \"capitalize-the-first-letter\";\nimport Listbox from \"../Listbox/Listbox\";\n\nimport Filter from \"./Filter/Filter\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ExpandLessIcon from \"@mui/icons-material/ExpandLess\";\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\nimport { red } from \"@mui/material/colors\";\nimport { set } from \"date-fns\";\n\n// import svgTest from \"../../icons/bigben.svg\";\n\nconst aws = require(\"aws-sdk\");\nconst s3 = new aws.S3({\n  accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n});\n\nconst { REACT_APP_S3_BUCKET: S3_BUCKET } = process.env;\n\n//laptop\nconst mapContainerStyle = {\n  width: \"65vw\",\n  height: \"60vh\",\n  left: \"0vw\",\n  top: \"0vh\",\n};\n\nconst center = {\n  lat: 34.373112,\n  lng: 6.252371,\n};\n\nfunction MyMap(props) {\n  const [open, setOpen] = useState(false);\n  const node = useRef();\n  const menuId = \"main-menu\";\n\n  useOnClickOutside(node, () => setOpen(false));\n\n  const [libraries] = useState([\"places\"]);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n\n  //checking if new user\n  const [newUser, setNewUser] = useState(false);\n  //trips\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [countryCount, setCountries] = useState(\" \");\n  const [showView, changeView] = useState(true);\n  const [dateView, changeDateView] = useState(false);\n  // Inputs\n  const [startDate, setStart] = useState(\"\");\n  const [endDate, setEnd] = useState(\"\");\n  const [ratingInp, setRating] = useState(0);\n  const [commentInp, setComment] = useState(\"\");\n  // Editing Trip Info\n  const [toggleTripEdit, setToggleTripEdit] = useState(false);\n  const [newStartDate, setNewStart] = useState(\"\");\n  const [newEndDate, setNewEnd] = useState(\"\");\n  const [newRating, setNewRating] = useState(\"\");\n  const [newComment, setNewComment] = useState(\"\");\n  const [newFile, setNewFile] = useState({ name: \"\" });\n  const [colors, setColors] = useState(null);\n  const [toggleList, SetToggleList] = useState(false);\n\n  //show info window\n  const [showIW, setshowIW] = useState(true);\n\n  //Aws\n  const [file, setFile] = useState({ name: \"\" });\n  const [fileView, setFileView] = useState(false);\n\n  //Device type/orientation\n  const { device, orientation } = useWindowDimensions();\n\n  //filter\n  const [value, setValue] = useState(\"\");\n\n  // toggle List Items Individually\n  const [showListItem, setShowListItem] = useState([\n    { id: \"this is a placeholder id\" },\n  ]);\n\n  //toggle Edit & Delete\n  const [toggleActions, setToggleActions] = useState(false);\n\n  const setUserColor = () => {\n    if (props.user.theme === \"Dark\") {\n      setColors(dark);\n    } else if (props.user.theme === \"Silver\") {\n      setColors(silver);\n    } else if (props.user.theme === \"No Labels\") {\n      setColors(noLabels);\n    } else if (props.user.theme === \"Original\") {\n      setColors(original);\n    } else if (props.user.theme === \"Sunset\") {\n      setColors(sunset);\n    }\n  };\n\n  const getCount = () => {\n    if (props.user.id) {\n      axios.get(`/api/trip-count/${props.user.id}`).then((res) => {\n        setCountries(res.data[0].countries);\n      });\n    }\n  };\n\n  // console.log(device, orientation)\n  useEffect(() => {\n    setUserColor();\n    axios.get(\"/api/user\").then((res) => {\n      //returning users - load data off of session\n      if (res.data[1][0]) {\n        setNewUser(false);\n        setCountries(res.data[2][0].countries);\n        setMarkers(res.data[1]);\n      }\n\n      //new users\n      else {\n        setNewUser(true);\n        setCountries(props.count[0].countries);\n        setMarkers(props.markers);\n      }\n    });\n  }, []);\n\n  let options = {\n    styles: colors,\n    disableDefaultUI: true,\n    zoomControl: true,\n    // minZoom: 1.9,\n    // maxZoom: 1.9,\n    draggable: true,\n    // restriction: {\n    //   latLngBounds: { north: 85, south: -85, west: -180, east: 180 },\n    //   strictBounds: true,\n    // },\n  };\n\n  // too (hopefully) cause less re-renders\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  let name = \"\";\n  let city = \"\";\n  let country = \"\";\n  const splitUpName = (coords) => {\n    const splitName = coords.address.split(\", \");\n    name = splitName[0];\n    country = splitName.pop();\n    city = splitName.pop();\n  };\n\n  // Add Markers\n  const addmarker = (coordinates) => {\n    console.log(\"coordinate types:\", coordinates.types);\n    if (props.user.id) {\n      splitUpName(coordinates);\n      axios\n        .post(\"/api/newtrip\", {\n          id: props.user.id,\n          name,\n          city,\n          country,\n          type: coordinates.types[0],\n          lat: coordinates.lat,\n          lng: coordinates.lng,\n        })\n        .then((res) => {\n          getCount();\n          mapRef.current.panTo({ lat: coordinates.lat, lng: coordinates.lng });\n          mapRef.current.setZoom(6);\n          setMarkers((current) => [\n            ...current,\n            {\n              name,\n              city,\n              country,\n              type: coordinates.types[0],\n              lat: coordinates.lat,\n              lng: coordinates.lng,\n              trip_id: res.data.trip_id,\n            },\n          ]);\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  const toggle = () => {\n    changeView(!showView);\n    setSelected(null);\n    setNewUser(false);\n  };\n\n  const toggleDateView = () => {\n    changeDateView(!dateView);\n  };\n\n  const toggleFileView = () => {\n    setFileView(!fileView);\n  };\n\n  // Confirm Closing of Info Window\n  const confirmClose = () => {\n    let result = window.confirm(\n      \"Are you sure you want to stop editing this trip? All your data will be lost\"\n    );\n    if (result === true) {\n      setStart(\"\");\n      setEnd(\"\");\n      setRating(\"\");\n      setComment(\"\");\n      setFile({});\n      setSelected(null);\n    } else if (result === false) {\n      let copySelected = selected;\n      let copyStart = startDate;\n      let copyEnd = endDate;\n      let copyRating = ratingInp;\n      let copyComment = commentInp;\n      setSelected(null);\n      setSelected(copySelected);\n      setStart(copyStart);\n      setEnd(copyEnd);\n      setRating(+copyRating);\n      setComment(copyComment);\n      setFile({});\n    }\n  };\n\n  const handleClose = () => {\n    startDate || endDate || ratingInp || commentInp || file.name\n      ? confirmClose()\n      : setSelected(null);\n  };\n\n  const handleEdit = () => {\n    setToggleTripEdit(!toggleTripEdit);\n    setNewStart(selected.start_date.substring(0, 10));\n    setNewEnd(selected.end_date.substring(0, 10));\n    setNewRating(selected.rating);\n    setNewComment(selected.comment);\n  };\n\n  // Edit Trip Info\n  const handleTripEditSubmit = (e) => {\n    e.preventDefault();\n    axios\n      .put(\"/api/trip\", {\n        trip_id: selected.trip_id,\n        start_date: newStartDate,\n        end_date: newEndDate,\n        rating: newRating,\n        comment: newComment,\n        file: newFile,\n      })\n      .then((res) => {\n        let copyMarkers = [...markers];\n        for (let i = 0; i < copyMarkers.length; i++) {\n          if (copyMarkers[i].trip_id === res.data.trip_id) {\n            copyMarkers[i].start_date = res.data.start_date;\n            copyMarkers[i].end_date = res.data.end_date;\n            copyMarkers[i].rating = res.data.rating;\n            copyMarkers[i].comment = res.data.comment;\n            {\n              newFile.name\n                ? getSignedRequest(newFile)\n                : console.log(\"no itinerary submitted\");\n            }\n          }\n        }\n        setMarkers(copyMarkers);\n        setToggleTripEdit(!toggleTripEdit);\n\n        setStart(\"\");\n        setEnd(\"\");\n        setRating(\"\");\n        setComment(\"\");\n        setNewComment({});\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // Submit Trip Info\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axios\n      .post(\"/api/tripinfo\", {\n        trip_id: selected.trip_id,\n        startDate,\n        endDate,\n        ratingInp,\n        commentInp,\n      })\n      .then((res) => {\n        let copyMarkers = [...markers];\n        for (let i = 0; i < copyMarkers.length; i++) {\n          if (copyMarkers[i].trip_id === res.data.trip_id) {\n            copyMarkers[i].start_date = res.data.start_date;\n            copyMarkers[i].end_date = res.data.end_date;\n            copyMarkers[i].rating = res.data.rating;\n            copyMarkers[i].comment = res.data.comment;\n            {\n              file.name\n                ? getSignedRequest(file)\n                : console.log(\"no itinerary submitted\");\n            }\n          }\n        }\n        setMarkers(copyMarkers);\n        setStart(\"\");\n        setEnd(\"\");\n        setRating(\"\");\n        setComment(\"\");\n        setFile({});\n      })\n      .catch((err) => console.log(err));\n  };\n\n  //AWS\n  const getSignedRequest = (file) => {\n    const fileName = `${randomString()}-${file.name.replace(/\\s/g, \"-\")}`;\n\n    axios\n      .get(\"/sign-s3\", {\n        params: {\n          \"file-name\": fileName,\n          \"file-type\": file.type,\n        },\n      })\n      .then((response) => {\n        const { signedRequest, url } = response.data;\n        uploadFile(file, signedRequest, url);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const uploadFile = (file, signedRequest, url) => {\n    const options = {\n      headers: {\n        \"Content-Type\": file.type,\n      },\n    };\n\n    axios\n      .put(signedRequest, file, options)\n      .then((response) => {\n        axios\n          .post(\"/api/file\", { url, trip_id: selected.trip_id })\n          .then((res) => {\n            // console.log(res.data)\n            let copyArray = [...markers];\n            for (let i = 0; i < copyArray.length; i++) {\n              if (selected.trip_id === copyArray[i].trip_id) {\n                copyArray[i].file = res.data.file;\n              }\n            }\n            setMarkers(copyArray);\n          })\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => {\n        if (err.response.status === 403) {\n          alert(\n            `Your request for a signed URL failed with a status 403. Double check the CORS configuration and bucket policy in the README. You also will want to double check your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your .env and ensure that they are the same as the ones that you created in the IAM dashboard. You may need to generate new keys\\n${err.stack}`\n          );\n        } else {\n          alert(`ERROR: ${err.status}\\n ${err.stack}`);\n        }\n      });\n  };\n\n  const doNothing = () => {\n    return undefined;\n  };\n\n  // Delete Markers\n  const handleDelete = () => {\n    if (props.user.id) {\n      axios\n        .delete(`/api/trip/${selected.trip_id}`)\n        .then((res) => {\n          //remove the trip from state and re-set state here\n          let copyMarkers = [...markers];\n          for (let i = 0; i < copyMarkers.length; i++) {\n            if (copyMarkers[i].trip_id === selected.trip_id) {\n              copyMarkers.splice(i, 1);\n            }\n          }\n          setMarkers(copyMarkers);\n\n          //add another axios call for count\n          axios.get(`/api/trip-count/${props.user.id}`).then((response) => {\n            setCountries(response.data[0].countries);\n          });\n\n          {\n            selected.file ? DeleteAwsFile() : doNothing();\n          }\n        })\n        .catch((err) => console.log(err));\n      setSelected(null);\n    }\n  };\n\n  let DeleteAwsFile = () => {\n    const params = {\n      Bucket: S3_BUCKET,\n      Key: selected.file.substring(47), //pushes the file that AWS recognizes (removes https:....)\n    };\n    //delete the file from db\n    // axios.put('/api/file', { trip_id: selected.trip_id })\n    //     .then(res => console.log(res.data))\n    //     .catch(err => console.log(err))\n\n    s3.deleteObject(params, function (err, data) {\n      if (err) console.log(err, err.stack);\n      // an error occurred\n      else console.log(data); // successful response\n      /*\n            data = {\n            }\n            */\n    });\n  };\n\n  const groupedMarkers = markers.reduce((r, a) => {\n    r[a.country] = [...(r[a.country] || []), a];\n    return r;\n  }, {});\n\n  // const groupedCities = Object.values(groupedMarkers).reduce((r, a) => {\n  //   r[a.city] = [...(r[a.city] || []), a];\n  //   return r;\n  // }, {});\n\n  const toggleListItem = (id) => {\n    const index = showListItem.map((e) => e.id).indexOf(id); //check if id in array\n    if (index === -1) {\n      //if not in array, add to array\n      setShowListItem((showListItem) => [...showListItem, { id }]);\n    } else {\n      let copyshowListItem = [...showListItem];\n      for (let i = 0; i < copyshowListItem.length; i++) {\n        if (copyshowListItem[i].id === id) {\n          copyshowListItem.splice(i, 1);\n        }\n      }\n      setShowListItem(copyshowListItem);\n    }\n  };\n\n  let entries = d3Collection\n    .nest()\n    .key(function (d) {\n      return d.country;\n    })\n    .key(function (d) {\n      return d.city;\n    })\n    .key(function (d) {\n      return d.type;\n    })\n    .entries(markers);\n\n  // const toggleActions = () => {\n  //   set(toggl);\n  // };\n\n  console.log(\"entries:\", entries);\n  return (\n    <div id=\"map-background\">\n      <div id=\"profile\">\n        <GoogleMap\n          className=\"myMapLaptop\"\n          mapContainerStyle={mapContainerStyle}\n          zoom={1.9}\n          center={center}\n          options={options}\n          onLoad={onMapLoad}\n          onClick={() => setshowIW(false)}\n        >\n          {/* if new user we are going to build a simple UI tutorial on how to use trekit */}\n\n          {showView ? (\n            <div className=\"AddBtn\">\n              {newUser ? (\n                <>\n                  <h2>Click to add a marker </h2>\n                  <div class=\"arrow-1\"></div>\n                </>\n              ) : null}\n\n              <h2 id=\"AddBtn\" onClick={toggle} title=\"Click to add trips\">\n                Add +\n              </h2>\n            </div>\n          ) : (\n            <div className=\"search-container\">\n              <h2 id=\"MinusBtnTutorial\">Search for a place</h2>\n              <SearchMap addmarker={addmarker} />\n              <h2 title=\"Click to close search\" id=\"MinusBtn\" onClick={toggle}>\n                -\n              </h2>\n            </div>\n          )}\n\n          {/* this should wait till we map through markers and convert string to array for type */}\n          {markers.map((marker, i) => (\n            <Marker\n              key={marker.trip_id}\n              title=\"Click to add trip info\"\n              position={{\n                lat: +marker.lat || marker.lat,\n                lng: +marker.lng || marker.lng,\n              }}\n              icon={{\n                url: marker.icon || undefined,\n                origin: new window.google.maps.Point(0, 0),\n                // anchor: new window.google.maps.Point(15, 15),\n                scaledSize: new window.google.maps.Size(60, 60),\n              }}\n              onClick={() => {\n                setshowIW(true);\n                setSelected(marker);\n                changeView(true);\n              }}\n            />\n          ))}\n\n          <div className=\"count\">\n            <h2 id=\"countDisplay\">\n              Countries <br />\n              <span className=\"countDisplay\">{countryCount}</span>\n            </h2>\n          </div>\n\n          {showIW && (\n            <InfoWindowComp\n              selected={selected}\n              handleClose={handleClose}\n              handleDelete={handleDelete}\n              toggleTripEdit={toggleTripEdit}\n              handleEdit={handleEdit}\n              newStartDate={newStartDate}\n              setNewStart={setNewStart}\n              newEndDate={newEndDate}\n              setNewEnd={setNewEnd}\n              newRating={newRating}\n              setNewRating={setNewRating}\n              newComment={newComment}\n              setNewComment={setNewComment}\n              toggleFileView={toggleFileView}\n              setNewFile={setNewFile}\n              handleTripEditSubmit={handleTripEditSubmit}\n              handleSubmit={handleSubmit}\n              dateView={dateView}\n              toggleDateView={toggleDateView}\n              startDate={startDate}\n              setStart={setStart}\n              endDate={endDate}\n              setEnd={setEnd}\n              setRating={setRating}\n              ratingInp={ratingInp}\n              setComment={setComment}\n              commentInp={commentInp}\n              setFile={setFile}\n              fileView={fileView}\n              newFile={newFile}\n            />\n          )}\n        </GoogleMap>\n        <div id=\"list-container\">\n          <h4>Markers</h4>\n          <input\n            placeholder=\"Filter Cities\"\n            value={value}\n            onChange={(e) => setValue(e.target.value.toLowerCase())}\n          />\n\n          {/* After grouping markers by country, city and type, we map here --List-- */}\n          {entries\n            .filter(\n              (thing) =>\n                thing.key.toLowerCase().includes(value) ||\n                thing.values.some((values) =>\n                  values.key.toLowerCase().includes(value)\n                )\n            )\n            .map((e, i) => {\n              return (\n                <ul key={i} className=\"list\">\n                  {/* Looks for if id of the country key is in showListItem */}\n                  <li className=\"countriesList\">\n                    {showListItem.find((item) => item.id === `${i}${e.key}`) ? (\n                      <ExpandLessIcon\n                        onClick={() => toggleListItem(`${i}${e.key}`)}\n                      />\n                    ) : (\n                      <ExpandMoreIcon\n                        onClick={() => toggleListItem(`${i}${e.key}`)}\n                      />\n                    )}\n                    <span\n                      className=\"country\"\n                      onClick={() => toggleListItem(`${i}${e.key}`)}\n                    >\n                      {e.key}\n                    </span>\n                  </li>\n\n                  {/* If the country key was added (toggled) to the showListItem list, then the cities will render below.  */}\n                  {showListItem.find((item) => item.id === `${i}${e.key}`)\n                    ? e.values.map((ee, ii) => {\n                        return (\n                          <ul>\n                            <li key={ii} className=\"citiesList\">\n                              {showListItem.find(\n                                (item) => item.id === `${ii}${ee.key}`\n                              ) ? (\n                                <ExpandLessIcon\n                                  onClick={() =>\n                                    toggleListItem(`${ii}${ee.key}`)\n                                  }\n                                />\n                              ) : (\n                                <ExpandMoreIcon\n                                  onClick={() =>\n                                    toggleListItem(`${ii}${ee.key}`)\n                                  }\n                                />\n                              )}\n                              <span\n                                onClick={() => toggleListItem(`${ii}${ee.key}`)}\n                              >\n                                {ee.key}\n                              </span>\n                            </li>\n                            {/* If the city key was added (toggled) to the showListItem list, then the types will render below.  */}\n                            {showListItem.find(\n                              (item) => item.id === `${ii}${ee.key}`\n                            )\n                              ? e.values[ii].values.map((eee, iii) => {\n                                  return (\n                                    <ul>\n                                      <li key={iii} className=\"typesList\">\n                                        {showListItem.find(\n                                          (item) =>\n                                            item.id === `${iii}${eee.key}`\n                                        ) ? (\n                                          <ExpandLessIcon\n                                            onClick={() =>\n                                              toggleListItem(`${iii}${eee.key}`)\n                                            }\n                                          />\n                                        ) : (\n                                          <ExpandMoreIcon\n                                            onClick={() =>\n                                              toggleListItem(`${iii}${eee.key}`)\n                                            }\n                                          />\n                                        )}\n                                        <span\n                                          onClick={() =>\n                                            toggleListItem(`${iii}${eee.key}`)\n                                          }\n                                        >\n                                          {capitalize(eee.key)}\n                                        </span>\n                                        {/* If the types key was added (toggled) to the showListItem list, then the actual places will render below.  */}\n                                      </li>\n                                      {showListItem.find(\n                                        (item) => item.id === `${iii}${eee.key}`\n                                      )\n                                        ? e.values[ii].values[iii].values.map(\n                                            (eeee, iiii) => {\n                                              return (\n                                                <ul>\n                                                  <li\n                                                    key={iiii}\n                                                    className=\"place\"\n                                                    onClick={() =>\n                                                      setSelected(eeee)\n                                                    }\n                                                  >\n                                                    <PushPinIcon\n                                                      style={{ color: \"red\" }}\n                                                    />\n                                                    {eeee.name}\n                                                    <MoreHorizIcon\n                                                      className=\"moreHoriz\"\n                                                      onClick={() =>\n                                                        toggleActions\n                                                      }\n                                                    />\n                                                  </li>\n                                                  {/* toggle  */}\n\n                                                  <li>\n                                                    <Listbox />\n                                                  </li>\n                                                </ul>\n                                              );\n                                            }\n                                          )\n                                        : null}\n                                    </ul>\n                                  );\n                                })\n                              : null}\n                          </ul>\n                        );\n                      })\n                    : null}\n\n                  {/* If the city key was added (toggled) to the showListItem list, then the types (places) will render below.  */}\n                </ul>\n              );\n            })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (reduxState) => ({\n  user: reduxState.userReducer.user,\n  markers: reduxState.userReducer.markers,\n  count: reduxState.userReducer.count,\n});\n\nexport default connect(mapStateToProps)(MyMap);\n","/Users/jacoborbach/trekit/src/Components/Settings/Settings.js",[],"/Users/jacoborbach/trekit/src/Components/FriendsProfile/FriendsProfile.js",["172","173","174"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { original } from \"../MyMap/ColorThemes/original\";\nimport { dark } from \"../MyMap/ColorThemes/dark\";\nimport { silver } from \"../MyMap/ColorThemes/silver\";\nimport { noLabels } from \"../MyMap/ColorThemes/noLabels\";\nimport { sunset } from \"../MyMap/ColorThemes/sunset\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport \"./FriendsProfile.css\";\n\n//laptop\nconst mapContainerStyle = {\n  width: \"88vw\",\n  height: \"74vh\",\n  left: \"6vw\",\n  top: \"3vh\",\n};\n\nconst center = {\n  lat: 34.373112,\n  lng: 6.252371,\n};\n\nexport default function FriendsProfile(props) {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n  });\n\n  const [id, setId] = useState(0);\n  const [user, setUser] = useState({});\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [cityCount, setCities] = useState(\" \");\n  const [countryCount, setCountries] = useState(\" \");\n  const [showView, changeView] = useState(true);\n  const [colors, setColors] = useState(null);\n  const [searchVal, setSearchVal] = useState(\"\");\n\n  useEffect(() => {\n    setId(props.match.params.id);\n  }, []);\n\n  useEffect(() => {\n    if (id) {\n      axios\n        .get(`/api/friend/profile/${id}`)\n        .then((res) => {\n          if (res.data[1][0].cities) {\n            setUser(res.data[0]);\n            if (res.data[0].theme === \"Dark\") {\n              setColors(dark);\n            } else if (res.data[0].theme === \"Silver\") {\n              setColors(silver);\n            } else if (res.data[0].theme === \"No Labels\") {\n              setColors(noLabels);\n            } else if (res.data[0].theme === \"Original\") {\n              setColors(original);\n            } else if (res.data[0].theme === \"Sunset\") {\n              setColors(sunset);\n            }\n            setCountries(res.data[1][0].countries);\n            setCities(res.data[1][0].cities);\n            setMarkers(res.data[2]);\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  }, [id]);\n\n  let options = {\n    styles: colors,\n    disableDefaultUI: true,\n    zoomControl: true,\n    minZoom: 1.5,\n  };\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  console.log(props);\n  return (\n    <div id=\"map-background\">\n      {/* Pro Pic */}\n      <h1>\n        {user.first_name} {user.last_name}\n      </h1>\n      <div className=\"following-container\">\n        <h1>\n          Following\n          <br />\n          <span>###</span>\n        </h1>\n        <h1>\n          Followers\n          <br />\n          <span>###</span>\n        </h1>\n      </div>\n      <span>\n        Follow <span>+</span>\n      </span>\n\n      <GoogleMap\n        className=\"myMapLaptop\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={2.15}\n        center={center}\n        options={options}\n        onLoad={onMapLoad}\n      >\n        <div className=\"search-container\">\n          <div className=\"search\">\n            <Combobox>\n              <ComboboxInput\n                value={searchVal}\n                onChange={(e) => setSearchVal(e.target.value)}\n                placeholder=\"Search for Cities...\"\n              />\n              <ComboboxPopover>\n                <ComboboxList>\n                  {markers\n                    .filter((element) =>\n                      element.city\n                        .toLowerCase()\n                        .includes(searchVal.toLowerCase())\n                    )\n                    .map((marker) => (\n                      <ComboboxOption\n                        key={marker.city}\n                        value={marker.city}\n                        onClick={() => setSelected(marker)}\n                      />\n                    ))}\n                  {/*  */}\n                </ComboboxList>\n              </ComboboxPopover>\n            </Combobox>\n          </div>\n        </div>\n\n        {markers.map((marker, i) => (\n          <Marker\n            key={i}\n            title=\"Click to view trip info\"\n            position={{\n              lat: +marker.lat || marker.lat,\n              lng: +marker.lng || marker.lng,\n            }}\n            onClick={() => {\n              setSelected(marker);\n              // changeView(true)\n            }}\n          />\n        ))}\n\n        <div className=\"count\">\n          <h2 id=\"countDisplay\">\n            Cities <br />\n            <span className=\"countDisplay\">{cityCount}</span>\n          </h2>\n          <h2 id=\"countDisplay\">\n            Countries <br />\n            <span className=\"countDisplay\">{countryCount}</span>\n          </h2>\n        </div>\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: +selected.lat, lng: +selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2 className=\"formName\">\n                {selected.city + \", \" + selected.country}\n              </h2>\n              <button className=\"addBtn\" title=\"Add to Wish List\">\n                Add\n              </button>\n              <div className=\"alignTripInfoLeft\">\n                {selected.start_date ? (\n                  <p>\n                    Start Date:{\" \"}\n                    <span>{selected.start_date.substring(0, 10)}</span>\n                  </p>\n                ) : null}\n                {selected.end_date ? (\n                  <p>\n                    End Date: <span>{selected.end_date.substring(0, 10)}</span>\n                  </p>\n                ) : null}\n\n                {selected.rating ? (\n                  <div className=\"ratingContainer\">\n                    <p>Rating</p>\n                    <div className=\"rating\">\n                      <input\n                        id=\"star5\"\n                        name={5}\n                        type=\"radio\"\n                        className=\"radio-btn hide\"\n                        checked={+selected.rating === 5}\n                        disabled=\"disabled\"\n                      />\n                      <label htmlFor=\"star5\">☆</label>\n                      <input\n                        id=\"star4\"\n                        name={4}\n                        type=\"radio\"\n                        className=\"radio-btn hide\"\n                        checked={+selected.rating === 4}\n                        disabled=\"disabled\"\n                      />\n                      <label htmlFor=\"star4\">☆</label>\n                      <input\n                        id=\"star3\"\n                        name={3}\n                        type=\"radio\"\n                        className=\"radio-btn hide\"\n                        checked={+selected.rating === 3}\n                        disabled=\"disabled\"\n                      />\n                      <label htmlFor=\"star3\">☆</label>\n                      <input\n                        id=\"star2\"\n                        name={2}\n                        type=\"radio\"\n                        className=\"radio-btn hide\"\n                        checked={+selected.rating === 2}\n                        disabled=\"disabled\"\n                      />\n                      <label htmlFor=\"star2\">☆</label>\n                      <input\n                        id=\"star1\"\n                        name={1}\n                        type=\"radio\"\n                        className=\"radio-btn hide\"\n                        checked={+selected.rating === 1}\n                        disabled=\"disabled\"\n                      />\n                      <label htmlFor=\"star1\">☆</label>\n                      <div className=\"clear\"></div>\n                    </div>\n                  </div>\n                ) : null}\n\n                {selected.comment ? (\n                  <>\n                    <p className=\"question\">Notes: </p>\n                    <span>{selected.comment}</span>\n                  </>\n                ) : null}\n              </div>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\n","/Users/jacoborbach/trekit/src/theme.js",[],"/Users/jacoborbach/trekit/src/hooks.js",[],"/Users/jacoborbach/trekit/src/global.js",[],"/Users/jacoborbach/trekit/src/useWindowDimensions.js",["175"],"import { useState, useEffect } from \"react\";\n\nexport default function useWindowDimensions() {\n  const hasWindow = typeof window !== \"undefined\";\n  let device;\n  let orientation;\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n\n    if (width > height) {\n      orientation = \"landscape\";\n    } else if (height > width) {\n      orientation = \"portrait\";\n    }\n    if (width >= 1350) {\n      device = \"laptop\";\n    }\n    // console.log(device)\n    return {\n      orientation,\n      device,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    if (hasWindow) {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n      window.addEventListener(\"resize\", handleResize);\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, [hasWindow]);\n\n  return windowDimensions;\n}\n","/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/dark.js",[],"/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/original.js",[],"/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/silver.js",[],"/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/noLabels.js",[],"/Users/jacoborbach/trekit/src/Components/SearchMap/SearchMap.js",[],"/Users/jacoborbach/trekit/src/Components/MyMap/ColorThemes/sunset.js",[],"/Users/jacoborbach/trekit/src/Components/InfoWindowComp/InfoWindowComp.js",["176","177","178"],"import React from \"react\";\nimport { InfoWindow } from \"@react-google-maps/api\";\nimport \"./InfoWindowComp.css\";\nimport svgTest from \"../../icons/bigben.svg\";\n\nexport default function InfoWindowComp(props) {\n  const {\n    selected,\n    handleClose,\n    handleDelete,\n    toggleTripEdit,\n    handleEdit,\n    newStartDate,\n    setNewStart,\n    newEndDate,\n    setNewEnd,\n    newRating,\n    setNewRating,\n    newComment,\n    setNewComment,\n    toggleFileView,\n    setNewFile,\n    handleTripEditSubmit,\n    handleSubmit,\n    dateView,\n    toggleDateView,\n    startDate,\n    setStart,\n    endDate,\n    setEnd,\n    setRating,\n    ratingInp,\n    commentInp,\n    setComment,\n    setFile,\n    fileView,\n  } = props;\n\n  function importAll(r) {\n    let images = {};\n    r.keys().map((item, index) => {\n      images[item.replace(\"./\", \"\")] = r(item);\n    });\n    return images;\n  }\n\n  const images = importAll(\n    require.context(`../../icons/USA/SVG`, false, /\\.svg$/)\n  );\n\n  return (\n    <div>\n      {selected ? (\n        <InfoWindow\n          // anchor={{ lat: 30, lng: 30 }}\n          // options={{\n\n          // disableAutoPan: false,\n          // pixelOffset: new window.google.maps.Size(100, 30),\n          // }}\n          position={{ lat: +selected.lat, lng: +selected.lng }}\n          onCloseClick={() => {\n            handleClose();\n          }}\n        >\n          {selected.start_date ||\n          selected.end_date ||\n          selected.rating ||\n          selected.comment ? (\n            <>\n              <h2 className=\"formName\">\n                {selected.name || selected.city + \", \" + selected.country}\n              </h2>\n              <button onClick={handleDelete} className=\"deleteBtn\">\n                Delete\n              </button>\n\n              {/* Displaying Trip Info */}\n              {!toggleTripEdit ? (\n                <div>\n                  <div className=\"alignTripInfoLeft\">\n                    <p>\n                      Start Date:{\" \"}\n                      <span>{selected.start_date.substring(0, 10)}</span>\n                    </p>\n\n                    <p>\n                      End Date:{\" \"}\n                      <span>{selected.end_date.substring(0, 10)}</span>\n                    </p>\n\n                    <div className=\"ratingContainer\">\n                      <p>Rating</p>\n                      <div className=\"rating\">\n                        <input\n                          id=\"star5\"\n                          name={5}\n                          type=\"radio\"\n                          className=\"radio-btn hide\"\n                          checked={+selected.rating === 5}\n                          disabled=\"disabled\"\n                        />\n                        <label htmlFor=\"star5\">☆</label>\n                        <input\n                          id=\"star4\"\n                          name={4}\n                          type=\"radio\"\n                          className=\"radio-btn hide\"\n                          checked={+selected.rating === 4}\n                          disabled=\"disabled\"\n                        />\n                        <label htmlFor=\"star4\">☆</label>\n                        <input\n                          id=\"star3\"\n                          name={3}\n                          type=\"radio\"\n                          className=\"radio-btn hide\"\n                          checked={+selected.rating === 3}\n                          disabled=\"disabled\"\n                        />\n                        <label htmlFor=\"star3\">☆</label>\n                        <input\n                          id=\"star2\"\n                          name={2}\n                          type=\"radio\"\n                          className=\"radio-btn hide\"\n                          checked={+selected.rating === 2}\n                          disabled=\"disabled\"\n                        />\n                        <label htmlFor=\"star2\">☆</label>\n                        <input\n                          id=\"star1\"\n                          name={1}\n                          type=\"radio\"\n                          className=\"radio-btn hide\"\n                          checked={+selected.rating === 1}\n                          disabled=\"disabled\"\n                        />\n                        <label htmlFor=\"star1\">☆</label>\n                        <div className=\"clear\"></div>\n                      </div>\n                    </div>\n\n                    <p className=\"question\">Notes: </p>\n                    <span>{selected.comment}</span>\n                  </div>\n\n                  <br />\n\n                  {selected.file ? (\n                    <>\n                      <div className=\"alignTripInfoLeft\">\n                        <div>Files:</div>\n                        <a\n                          href={selected.file}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Itinerary\n                        </a>\n                      </div>\n                      <br />\n                      {/* <button onClick={DeleteAwsFile}>Delete AWS File</button> */}\n\n                      <button onClick={handleEdit}>Edit</button>\n                      <br />\n                      <br />\n                    </>\n                  ) : (\n                    <>\n                      <button onClick={handleEdit}>Edit</button>\n                      <br />\n                      <br />\n                    </>\n                  )}\n                </div>\n              ) : (\n                <>\n                  <label>Start Date:</label>\n                  <input\n                    type=\"date\"\n                    value={newStartDate}\n                    onChange={(e) => setNewStart(e.target.value)}\n                  />\n\n                  <br />\n                  <br />\n\n                  <label>End Date:</label>\n                  <input\n                    id=\"endDateInp\"\n                    type=\"date\"\n                    value={newEndDate}\n                    onChange={(e) => setNewEnd(e.target.value)}\n                  />\n                  <br />\n                  <br />\n\n                  <label>Rating:</label>\n                  <input\n                    value={newRating}\n                    onChange={(e) => setNewRating(e.target.value)}\n                  />\n\n                  {/* Text Area */}\n                  <h3 id=\"review\">Review</h3>\n                  <textarea\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    maxLength=\"1250\"\n                    rows=\"4\"\n                    cols=\"20\"\n                  />\n                  <br />\n                  <br />\n\n                  <div>\n                    {!fileView ? (\n                      <p id=\"cutPadding\" onClick={toggleFileView}>\n                        Add an Itinerary+\n                      </p>\n                    ) : (\n                      <>\n                        <input\n                          type=\"file\"\n                          accept=\"image/png, .doc, .docx, image/jpeg\"\n                          onChange={(e) => {\n                            setNewFile(e.target.files[0]);\n                          }}\n                        />\n                        <span onClick={toggleFileView}>Dont Add</span>\n                      </>\n                    )}\n                  </div>\n                  <br />\n\n                  <button onClick={handleEdit}>Back</button>\n                  <button id=\"EditTripSubmit\" onClick={handleTripEditSubmit}>\n                    Submit\n                  </button>\n\n                  <br />\n                  <br />\n                </>\n              )}\n            </>\n          ) : (\n            // Add Trip Info\n            <>\n              <form onSubmit={handleSubmit}>\n                <button onClick={handleDelete} className=\"deleteBtn\">\n                  Delete\n                </button>\n                <h2 className=\"formName\">\n                  {selected.name || selected.city + \", \" + selected.country}\n                </h2>\n                <div className=\"tripInfoForm\">\n                  {!dateView ? (\n                    <h3 onClick={toggleDateView} id=\"review\">\n                      Add dates{\" \"}\n                      <span id=\"plus\" title=\"Click to add Dates\">\n                        +\n                      </span>\n                    </h3>\n                  ) : (\n                    <div className=\"dumbclass\">\n                      {/* Trip Dates */}\n                      {/* <DateInput\n                name=\"date\"\n                placeholder=\"Date\"\n\n                iconPosition=\"left\"\n\n            /> */}\n                      <label>Start Date:</label>\n                      <input\n                        type=\"date\"\n                        placeholder=\"dd/mm/yyyy\"\n                        pattern=\"(^(((0[1-9]|1[0-9]|2[0-8])[\\/](0[1-9]|1[012]))|((29|30|31)[\\/](0[13578]|1[02]))|((29|30)[\\/](0[4,6,9]|11)))[\\/](19|[2-9][0-9])\\d\\d$)|(^29[\\/]02[\\/](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)\"\n                        required\n                        value={startDate}\n                        onChange={(e) => setStart(e.target.value)}\n                      />\n                      <br />\n\n                      <label>End Date:</label>\n                      <input\n                        id=\"endDateInp\"\n                        type=\"date\"\n                        placeholder=\"dd/mm/yyyy\"\n                        pattern=\"(^(((0[1-9]|1[0-9]|2[0-8])[\\/](0[1-9]|1[012]))|((29|30|31)[\\/](0[13578]|1[02]))|((29|30)[\\/](0[4,6,9]|11)))[\\/](19|[2-9][0-9])\\d\\d$)|(^29[\\/]02[\\/](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)\"\n                        required\n                        value={endDate}\n                        onChange={(e) => setEnd(e.target.value)}\n                      />\n\n                      <br />\n                      <p\n                        onClick={toggleDateView}\n                        id=\"back\"\n                        title=\"Click to go back to 'Add Dates' view\"\n                      >\n                        Back\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Star Rating */}\n                  <div className=\"ratingContainer\">\n                    <h3 className=\"question\">Rating</h3>\n                    <div className=\"rating\">\n                      <input\n                        onChange={(e) => setRating(e.target.name)}\n                        id=\"star5\"\n                        name={5}\n                        type=\"radio\"\n                        value={ratingInp}\n                        className=\"radio-btn hide\"\n                        checked={+ratingInp === 5}\n                      />\n                      <label htmlFor=\"star5\">☆</label>\n                      <input\n                        onChange={(e) => setRating(e.target.name)}\n                        id=\"star4\"\n                        name={4}\n                        type=\"radio\"\n                        value={ratingInp}\n                        className=\"radio-btn hide\"\n                        checked={+ratingInp === 4}\n                      />\n                      <label htmlFor=\"star4\">☆</label>\n                      <input\n                        onChange={(e) => setRating(e.target.name)}\n                        id=\"star3\"\n                        name={3}\n                        type=\"radio\"\n                        value={ratingInp}\n                        className=\"radio-btn hide\"\n                        checked={+ratingInp === 3}\n                      />\n                      <label htmlFor=\"star3\">☆</label>\n                      <input\n                        onChange={(e) => setRating(e.target.name)}\n                        id=\"star2\"\n                        name={2}\n                        type=\"radio\"\n                        value={ratingInp}\n                        className=\"radio-btn hide\"\n                        checked={+ratingInp === 2}\n                      />\n                      <label htmlFor=\"star2\">☆</label>\n                      <input\n                        onChange={(e) => setRating(e.target.name)}\n                        id=\"star1\"\n                        name={1}\n                        type=\"radio\"\n                        value={ratingInp}\n                        className=\"radio-btn hide\"\n                        checked={+ratingInp === 1}\n                      />\n                      <label htmlFor=\"star1\">☆</label>\n                      <div className=\"clear\"></div>\n                    </div>\n                  </div>\n\n                  {/* Text Area */}\n                  <h3 id=\"review\">Review</h3>\n                  <textarea\n                    value={commentInp}\n                    onChange={(e) => setComment(e.target.value)}\n                    maxLength=\"1250\"\n                    rows=\"4\"\n                    cols=\"20\"\n                  />\n                  <br />\n\n                  {/* Custom Pin */}\n                  <h3>Customize Marker:</h3>\n\n                  <div id=\"customizeIcon\">\n                    {Object.keys(images).map(function (key, index) {\n                      return (\n                        <img\n                          className=\"customizeIcon\"\n                          src={images[key].default}\n                          height={50}\n                          width={50}\n                          // key={index}\n                        />\n                      );\n                    })}\n                  </div>\n\n                  {/* <img src={images[\"test.svg\"].default} /> */}\n\n                  <br />\n\n                  {/* AWS */}\n                  <span>Submit Itinerary: </span>\n                  <input\n                    type=\"file\"\n                    accept=\"image/png, .doc, .docx, image/jpeg\"\n                    onChange={(e) => {\n                      setFile(e.target.files[0]);\n                    }}\n                  />\n                  <br />\n                </div>\n                <input type=\"submit\" />\n              </form>\n            </>\n          )}\n        </InfoWindow>\n      ) : null}\n    </div>\n  );\n}\n","/Users/jacoborbach/trekit/src/Components/MyMap/Filter/Filter.js",[],"/Users/jacoborbach/trekit/src/Components/index.js",[],"/Users/jacoborbach/trekit/src/Components/Menu/index.js",[],"/Users/jacoborbach/trekit/src/Components/Burger/index.js",[],"/Users/jacoborbach/trekit/src/Components/Menu/Menu.js",[],"/Users/jacoborbach/trekit/src/Components/Burger/Burger.js",[],"/Users/jacoborbach/trekit/src/Components/Menu/Menu.styled.js",[],"/Users/jacoborbach/trekit/src/Components/Burger/Burger.styled.js",[],"/Users/jacoborbach/trekit/src/Components/Listbox/Listbox.js",["179","180","181","182"],"import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Divider from \"@mui/material/Divider\";\nimport InboxIcon from \"@mui/icons-material/Inbox\";\nimport DraftsIcon from \"@mui/icons-material/Drafts\";\n\nexport default function Listbox() {\n  return (\n    <Box sx={{ width: \"75%\", maxWidth: 360, bgcolor: \"background.paper\" }}>\n      <nav aria-label=\"main edit buttons\">\n        <List>\n          <ListItem disablePadding>\n            <ListItemButton>\n              <ListItemText primary=\"Edit\" />\n            </ListItemButton>\n          </ListItem>\n          <ListItem disablePadding>\n            <ListItemButton component=\"a\" href=\"#simple-list\">\n              <ListItemText primary=\"Delete\" />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </nav>\n    </Box>\n  );\n}\n",{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":1,"column":27,"nodeType":"189","messageId":"190","endLine":1,"endColumn":36},{"ruleId":"187","severity":1,"message":"191","line":2,"column":8,"nodeType":"189","messageId":"190","endLine":2,"endColumn":13},{"ruleId":"187","severity":1,"message":"192","line":6,"column":3,"nodeType":"189","messageId":"190","endLine":6,"endColumn":11},{"ruleId":"187","severity":1,"message":"193","line":7,"column":3,"nodeType":"189","messageId":"190","endLine":7,"endColumn":16},{"ruleId":"187","severity":1,"message":"194","line":8,"column":3,"nodeType":"189","messageId":"190","endLine":8,"endColumn":18},{"ruleId":"187","severity":1,"message":"195","line":9,"column":3,"nodeType":"189","messageId":"190","endLine":9,"endColumn":15},{"ruleId":"187","severity":1,"message":"196","line":10,"column":3,"nodeType":"189","messageId":"190","endLine":10,"endColumn":17},{"ruleId":"187","severity":1,"message":"197","line":14,"column":10,"nodeType":"189","messageId":"190","endLine":14,"endColumn":19},{"ruleId":"187","severity":1,"message":"198","line":18,"column":10,"nodeType":"189","messageId":"190","endLine":18,"endColumn":17},{"ruleId":"187","severity":1,"message":"199","line":19,"column":10,"nodeType":"189","messageId":"190","endLine":19,"endColumn":23},{"ruleId":"187","severity":1,"message":"200","line":19,"column":25,"nodeType":"189","messageId":"190","endLine":19,"endColumn":41},{"ruleId":"187","severity":1,"message":"201","line":20,"column":10,"nodeType":"189","messageId":"190","endLine":20,"endColumn":15},{"ruleId":"187","severity":1,"message":"202","line":20,"column":17,"nodeType":"189","messageId":"190","endLine":20,"endColumn":25},{"ruleId":"187","severity":1,"message":"203","line":21,"column":10,"nodeType":"189","messageId":"190","endLine":21,"endColumn":14},{"ruleId":"187","severity":1,"message":"204","line":21,"column":16,"nodeType":"189","messageId":"190","endLine":21,"endColumn":23},{"ruleId":"187","severity":1,"message":"205","line":24,"column":7,"nodeType":"189","messageId":"190","endLine":24,"endColumn":19},{"ruleId":"187","severity":1,"message":"206","line":14,"column":10,"nodeType":"189","messageId":"190","endLine":14,"endColumn":23},{"ruleId":"187","severity":1,"message":"207","line":16,"column":10,"nodeType":"189","messageId":"190","endLine":16,"endColumn":22},{"ruleId":"187","severity":1,"message":"208","line":17,"column":10,"nodeType":"189","messageId":"190","endLine":17,"endColumn":15},{"ruleId":"187","severity":1,"message":"209","line":18,"column":10,"nodeType":"189","messageId":"190","endLine":18,"endColumn":16},{"ruleId":"187","severity":1,"message":"210","line":18,"column":18,"nodeType":"189","messageId":"190","endLine":18,"endColumn":22},{"ruleId":"187","severity":1,"message":"211","line":19,"column":8,"nodeType":"189","messageId":"190","endLine":19,"endColumn":17},{"ruleId":"187","severity":1,"message":"212","line":25,"column":8,"nodeType":"189","messageId":"190","endLine":25,"endColumn":14},{"ruleId":"187","severity":1,"message":"213","line":30,"column":10,"nodeType":"189","messageId":"190","endLine":30,"endColumn":13},{"ruleId":"187","severity":1,"message":"214","line":31,"column":10,"nodeType":"189","messageId":"190","endLine":31,"endColumn":13},{"ruleId":"187","severity":1,"message":"215","line":57,"column":10,"nodeType":"189","messageId":"190","endLine":57,"endColumn":14},{"ruleId":"187","severity":1,"message":"216","line":59,"column":9,"nodeType":"189","messageId":"190","endLine":59,"endColumn":15},{"ruleId":"187","severity":1,"message":"217","line":91,"column":10,"nodeType":"189","messageId":"190","endLine":91,"endColumn":20},{"ruleId":"187","severity":1,"message":"218","line":91,"column":22,"nodeType":"189","messageId":"190","endLine":91,"endColumn":35},{"ruleId":"187","severity":1,"message":"219","line":101,"column":11,"nodeType":"189","messageId":"190","endLine":101,"endColumn":17},{"ruleId":"187","severity":1,"message":"220","line":101,"column":19,"nodeType":"189","messageId":"190","endLine":101,"endColumn":30},{"ruleId":"187","severity":1,"message":"221","line":112,"column":25,"nodeType":"189","messageId":"190","endLine":112,"endColumn":41},{"ruleId":"222","severity":1,"message":"223","line":154,"column":6,"nodeType":"224","endLine":154,"endColumn":8,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":300,"column":13,"nodeType":"228","messageId":"229","endLine":304,"endColumn":14},{"ruleId":"226","severity":1,"message":"227","line":338,"column":13,"nodeType":"228","messageId":"229","endLine":342,"endColumn":14},{"ruleId":"226","severity":1,"message":"227","line":434,"column":11,"nodeType":"228","messageId":"229","endLine":436,"endColumn":12},{"ruleId":"187","severity":1,"message":"230","line":464,"column":9,"nodeType":"189","messageId":"190","endLine":464,"endColumn":23},{"ruleId":"187","severity":1,"message":"231","line":48,"column":10,"nodeType":"189","messageId":"190","endLine":48,"endColumn":18},{"ruleId":"187","severity":1,"message":"232","line":48,"column":20,"nodeType":"189","messageId":"190","endLine":48,"endColumn":30},{"ruleId":"222","severity":1,"message":"233","line":54,"column":6,"nodeType":"224","endLine":54,"endColumn":8,"suggestions":"234"},{"ruleId":"222","severity":1,"message":"235","line":39,"column":6,"nodeType":"224","endLine":39,"endColumn":17,"suggestions":"236"},{"ruleId":"187","severity":1,"message":"237","line":4,"column":8,"nodeType":"189","messageId":"190","endLine":4,"endColumn":15},{"ruleId":"238","severity":1,"message":"239","line":41,"column":32,"nodeType":"240","messageId":"241","endLine":41,"endColumn":34},{"ruleId":"242","severity":1,"message":"243","line":383,"column":25,"nodeType":"244","endLine":389,"endColumn":27},{"ruleId":"187","severity":1,"message":"245","line":6,"column":8,"nodeType":"189","messageId":"190","endLine":6,"endColumn":20},{"ruleId":"187","severity":1,"message":"246","line":8,"column":8,"nodeType":"189","messageId":"190","endLine":8,"endColumn":15},{"ruleId":"187","severity":1,"message":"247","line":9,"column":8,"nodeType":"189","messageId":"190","endLine":9,"endColumn":17},{"ruleId":"187","severity":1,"message":"248","line":10,"column":8,"nodeType":"189","messageId":"190","endLine":10,"endColumn":18},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Combobox' is defined but never used.","'ComboboxInput' is defined but never used.","'ComboboxPopover' is defined but never used.","'ComboboxList' is defined but never used.","'ComboboxOption' is defined but never used.","'setISODay' is defined but never used.","'textVal' is assigned a value but never used.","'searchResults' is assigned a value but never used.","'setsearchResults' is assigned a value but never used.","'first' is assigned a value but never used.","'setFirst' is assigned a value but never used.","'last' is assigned a value but never used.","'setLast' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'ThemeProvider' is defined but never used.","'GlobalStyles' is defined but never used.","'theme' is defined but never used.","'Burger' is defined but never used.","'Menu' is defined but never used.","'FocusLock' is defined but never used.","'Filter' is defined but never used.","'red' is defined but never used.","'set' is defined but never used.","'open' is assigned a value but never used.","'menuId' is assigned a value but never used.","'toggleList' is assigned a value but never used.","'SetToggleList' is assigned a value but never used.","'device' is assigned a value but never used.","'orientation' is assigned a value but never used.","'setToggleActions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.count', 'props.markers', and 'setUserColor'. Either include them or remove the dependency array. If 'setCountries' needs the current value of 'props.count', you can also switch to useReducer instead of useState and read 'props.count' in the reducer.","ArrayExpression",["251"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'groupedMarkers' is assigned a value but never used.","'showView' is assigned a value but never used.","'changeView' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array. If 'setId' needs the current value of 'props.match.params.id', you can also switch to useReducer instead of useState and read 'props.match.params.id' in the reducer.",["252"],"React Hook useEffect has a missing dependency: 'getWindowDimensions'. Either include it or remove the dependency array.",["253"],"'svgTest' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ListItemIcon' is defined but never used.","'Divider' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [props.count, props.markers, setUserColor]",{"range":"260","text":"261"},"Update the dependencies array to be: [props.match.params.id]",{"range":"262","text":"263"},"Update the dependencies array to be: [getWindowDimensions, hasWindow]",{"range":"264","text":"265"},[4839,4841],"[props.count, props.markers, setUserColor]",[1444,1446],"[props.match.params.id]",[962,973],"[getWindowDimensions, hasWindow]"]